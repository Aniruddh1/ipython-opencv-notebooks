Params for new branch xfd_optimized_dispense:

leadCols = 6        #1001/2 head
trailCols = 6       #1001/2 head
dataChannels = 500  #1001/2 head

XPMComboFunctions=true
bypassXUSBVersionErrors=true
enableScorpionLog=true
optimizeMultiPass=true

bypassVersionErrors?
expectedDLLVersion
expectedFPGAVersion


PrintManagerXpm::startPrintingSwathe
PrintManagerXpm::startPrintingAllSwathes
PrintManagerXpm::startPrintingSwatheZero


backup:
  cd /c &&  tar czvf workspace-backup-`date +%Y%m%d`.tgz workspace/etc/ workspace/bin/ workspace/lib workspace/scripts/

C:\workspace\recipe\CNT tool grids\small drops\g4x1pt5S_referencePatEdited_12.98max.drp

-------------------------------------
July/Aug 2016 Thruput Testing

Goal: Capture logs/wireshark data when errant drops happen

James' suggestions:
1. Enable verbose logging in Scorpion – to do this you need to edit XUSBDLL.xml which is located in C:\Xaar, you need to add the line:

   <BigLog type="integer" value="1" /> to the <Configuration> section of that file

2. Start up Wireshark and point it at the NIC that the XPM is running through

3. Enable logging (XaarScorpionAllowLogging).  Add to xfd properties file:

    enableScorpionLog=true

4. Run your print run for how many swathes it takes for the errant drops to appear

5. If possible, note the swathe number that the errant drops occurred on (I don’t know if this is possible in real time or whether you can establish when this occurred after the fact?)

Workflow:

  1) Setup the logging as per James (see above)
  2) Start a wireshark capture session on XPM nic
  3) Dispense a multi-swathe pattern, note the time stamp
  4) Check for errant drops.  If none, go-to step 2, otherwise end test

set testCnt 100
for { set idx 0 } { $idx < $testCnt } {  incr idx } { $xyt gotoPos -180 0 $c; $xyt waitForStop $c; $actions imprintDispense 0 0  $c; $xyt gotoPos 180 0 $c; $xyt waitForStop $c }

$xyt gotoPos -180 0 $c; $xyt waitForStop $c; $actions imprintDispense 0 0 $c; $xyt gotoPos 180 0 $c;$xyt waitForStop $c


Single dispense with errant drops:
 ScorpionDLL.txt: 22:46:47
 wireshark: single_dispense_with_errant_drops.pcapng
-------------------
2016_07_27

Startup / Init

-----------------------------
2016_09_02

testing jetPat with external PD from

loadPatToXfd recipe/shifted2x2-2pass.drp
loadPatToXfd recipe/CheckerForCanon_2pass_divby3.drp

set testCnt 10
for { set idx 0 } { $idx < $testCnt } {  after 1000; incr idx } { jetPat2 0 0 0; after 10; jetPat2 0 0 1 }

timing for above loop:
    25.102 - 24.819  = 0.283
     26.108 - 25.102 = 1.006
     ------------------------
                       1.289

    26.108 - 26.389  = 0.281
     27.397 - 26.389 = 1.008
    ------------------------
                       1.289

    27.684 - 27.397  = 0.287
     28.694 - 27.684 = 1.010
    ------------------------
                       1.297

    28.994 - 28.694

...so use these setting for cycle.py:

   sudo ./cycle.py -c 2 -f 2 -l 10 -t 1.3


---------------------
09/13/16

I think I need to better synchronize the jetPat2 cmd with cycle.py...let's add a socket connection

tcl side:

set s [socket 10.0.14.173 8888];fconfigure $s -buffering line

loadPatToXfd recipe/CheckerForCanon_2pass_divby3_no3.drp
set testCnt 100
for { set idx 0 } { $idx < $testCnt } {  after 200; incr idx } { jetPat2 0 0 0; puts $s "go $idx-1"; after 400; jetPat2 0 0 1; puts $s "go $idx-2"; }


set testCnt 100
for { set idx 0 } { $idx < $testCnt } {  after 500; incr idx } { jetPat2 0 0 0; after 100; puts $s "go $idx-1"; after 500; jetPat 0 0 1;after 100; puts $s "go $idx-2"; }

python side:
import socket
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.bind(('10.0.14.173', 8888))
s.listen(10)
conn, addr = s.accept()

#!/usr/bin/python

import time
from datetime import datetime
import argparse
import CHIP_IO.GPIO as GPIO
import socket

def doLog(log_msg):
    print("%s: %s" % (datetime.now().strftime("%Y_%d_%m (%a) - %H:%M:%S.%f")[:-3], log_msg))

if __name__ == "__main__":
    '''
    pd_socketServer.py -p port
    '''
    parser = argparse.ArgumentParser(description='open socket on specified port, listen for "go", produce PD signal')
    parser.add_argument('-p',  dest='port', type=int, default=8888, help='port to listen on')

    args = parser.parse_args()

    GPIO.setup("CSID0", GPIO.OUT)
    GPIO.setup("CSID1", GPIO.OUT)
    GPIO.output("CSID0", 0)
    GPIO.output("CSID1", 0)

    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.bind(('', args.port))
    s.listen(10)
    doLog('Waiting on port %d' % ( args.port))
    conn, addr = s.accept()
    doLog('Recieved conn from %s' % ( addr))

    while True:
        d = conn.recv(10)
        if d[:-2] == 'go':
            doLog("Rcv'd go!")
            GPIO.output("CSID0", 1)
            GPIO.output("CSID1", 1)
            time.sleep(0.100)
            GPIO.output("CSID0", 0)
            GPIO.output("CSID1", 0)

------------------------------

09/13/16 - 09/15/16

 More tweaking of setting to get external encoder setting correct.

  - Tried setting things up in XDemo, but nothing seemed to working
  - Got Van's help.  Turns out it was all in the properties file:

    encoderMultiply=10  # this defaults to 1, so we need to set explicitly to 10

    interRowGap_mm = [half value used for int encoder]
    In other words, if we use the following for internal encoder:
       interRowGap_mm=4.797
    ...then we would divide by 2 and set to:
       interRowGap_mm=2.3985    #For external

   ### set true for int encoder, false for external encoder
   #headGroup_B_passesReversed=true
   headGroup_B_passesReversed=false

   # had to subtract ~1.5mm from RPO
   # for external encoder:
   #headGroup_B_reversePassOffset_mm=-1.500
   headGroup_B_reversePassOffset_mm=40


for { set idx 0 } { $idx < $testCnt } {  incr idx } {$actions imprintDispense 0 0  $c } ; $xyt gotoPos 180 0 $c

pattern: CheckerForCanon_2pass_divby3_no3.drp

 09/16  Testing:
  100     100
  100     200
  100     300
  100     400
  100     500
  100     600
  100     700
  100     800
  100     900
  100     1000
  100     1100
  100     1200
  100     1300
  100     1400
  100     1500
  100     1600
  100     1700
  100     1800
  100     1900
  200     2100
  200     2300
  200     2500

09/20 testing:

pattern: CheckerForCanon_2pass_divby3_no3.drp

   10      10
  100     110
  100     210
  200     410
  200     610
  200     810
  200     1010
  200     1210
  200     1410
  200     1610
  200     1810
  200     2010
  200     2210
  300     2510

9/21 testing:

pattern: C:\workspace\recipe\CNT tool grids\small drops\g4x3s1_26x33.drp

  200     200
  200     400
  200     600
  600     1200 # can go 600 without cleaning wafer with this drop pattern
  600     1800
  600     2400
  600     3000
  600     3600

10/03 testing with re-soldered cable and the xfd_optimized_dispense branch

  10      10
  10      20
  100     120
  100     220
  400     620
  400     1020
  600     1620

  good enough...

